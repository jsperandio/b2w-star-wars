// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	domain "github.com/jsperandio/b2w-star-wars/domain"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PlanetRepository is an autogenerated mock type for the PlanetRepository type
type PlanetRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *PlanetRepository) Delete(id primitive.ObjectID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *PlanetRepository) FindAll() ([]*domain.Planet, error) {
	ret := _m.Called()

	var r0 []*domain.Planet
	if rf, ok := ret.Get(0).(func() []*domain.Planet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PlanetRepository) GetByID(id primitive.ObjectID) (*domain.Planet, error) {
	ret := _m.Called(id)

	var r0 *domain.Planet
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.Planet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *PlanetRepository) GetByName(name string) (*domain.Planet, error) {
	ret := _m.Called(name)

	var r0 *domain.Planet
	if rf, ok := ret.Get(0).(func(string) *domain.Planet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: a
func (_m *PlanetRepository) Store(a *domain.Planet) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Planet) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
